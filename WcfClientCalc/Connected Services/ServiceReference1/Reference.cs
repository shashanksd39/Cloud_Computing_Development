//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IScientificCalculatorService")]
    public interface IScientificCalculatorService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Add", ReplyAction="http://tempuri.org/IScientificCalculatorService/AddResponse")]
        double Add(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Add", ReplyAction="http://tempuri.org/IScientificCalculatorService/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Subtract", ReplyAction="http://tempuri.org/IScientificCalculatorService/SubtractResponse")]
        double Subtract(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Subtract", ReplyAction="http://tempuri.org/IScientificCalculatorService/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Multiply", ReplyAction="http://tempuri.org/IScientificCalculatorService/MultiplyResponse")]
        double Multiply(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Multiply", ReplyAction="http://tempuri.org/IScientificCalculatorService/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Divide", ReplyAction="http://tempuri.org/IScientificCalculatorService/DivideResponse")]
        double Divide(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Divide", ReplyAction="http://tempuri.org/IScientificCalculatorService/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Power", ReplyAction="http://tempuri.org/IScientificCalculatorService/PowerResponse")]
        double Power(double baseValue, double exponent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Power", ReplyAction="http://tempuri.org/IScientificCalculatorService/PowerResponse")]
        System.Threading.Tasks.Task<double> PowerAsync(double baseValue, double exponent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/SquareRoot", ReplyAction="http://tempuri.org/IScientificCalculatorService/SquareRootResponse")]
        double SquareRoot(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/SquareRoot", ReplyAction="http://tempuri.org/IScientificCalculatorService/SquareRootResponse")]
        System.Threading.Tasks.Task<double> SquareRootAsync(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Sine", ReplyAction="http://tempuri.org/IScientificCalculatorService/SineResponse")]
        double Sine(double angleInDegrees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Sine", ReplyAction="http://tempuri.org/IScientificCalculatorService/SineResponse")]
        System.Threading.Tasks.Task<double> SineAsync(double angleInDegrees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Cosine", ReplyAction="http://tempuri.org/IScientificCalculatorService/CosineResponse")]
        double Cosine(double angleInDegrees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Cosine", ReplyAction="http://tempuri.org/IScientificCalculatorService/CosineResponse")]
        System.Threading.Tasks.Task<double> CosineAsync(double angleInDegrees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Tangent", ReplyAction="http://tempuri.org/IScientificCalculatorService/TangentResponse")]
        double Tangent(double angleInDegrees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Tangent", ReplyAction="http://tempuri.org/IScientificCalculatorService/TangentResponse")]
        System.Threading.Tasks.Task<double> TangentAsync(double angleInDegrees);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Logarithm", ReplyAction="http://tempuri.org/IScientificCalculatorService/LogarithmResponse")]
        double Logarithm(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Logarithm", ReplyAction="http://tempuri.org/IScientificCalculatorService/LogarithmResponse")]
        System.Threading.Tasks.Task<double> LogarithmAsync(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Exponential", ReplyAction="http://tempuri.org/IScientificCalculatorService/ExponentialResponse")]
        double Exponential(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/Exponential", ReplyAction="http://tempuri.org/IScientificCalculatorService/ExponentialResponse")]
        System.Threading.Tasks.Task<double> ExponentialAsync(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/AbsoluteValue", ReplyAction="http://tempuri.org/IScientificCalculatorService/AbsoluteValueResponse")]
        double AbsoluteValue(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/AbsoluteValue", ReplyAction="http://tempuri.org/IScientificCalculatorService/AbsoluteValueResponse")]
        System.Threading.Tasks.Task<double> AbsoluteValueAsync(double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/PerformMultipleOperations", ReplyAction="http://tempuri.org/IScientificCalculatorService/PerformMultipleOperationsResponse" +
            "")]
        System.Collections.Generic.Dictionary<string, double> PerformMultipleOperations(double value1, double value2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IScientificCalculatorService/PerformMultipleOperations", ReplyAction="http://tempuri.org/IScientificCalculatorService/PerformMultipleOperationsResponse" +
            "")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> PerformMultipleOperationsAsync(double value1, double value2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IScientificCalculatorServiceChannel : ServiceReference1.IScientificCalculatorService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class ScientificCalculatorServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IScientificCalculatorService>, ServiceReference1.IScientificCalculatorService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ScientificCalculatorServiceClient() : 
                base(ScientificCalculatorServiceClient.GetDefaultBinding(), ScientificCalculatorServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IScientificCalculatorService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScientificCalculatorServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ScientificCalculatorServiceClient.GetBindingForEndpoint(endpointConfiguration), ScientificCalculatorServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScientificCalculatorServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ScientificCalculatorServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScientificCalculatorServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ScientificCalculatorServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ScientificCalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public double Add(double n1, double n2)
        {
            return base.Channel.Add(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double n1, double n2)
        {
            return base.Channel.AddAsync(n1, n2);
        }
        
        public double Subtract(double n1, double n2)
        {
            return base.Channel.Subtract(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double n1, double n2)
        {
            return base.Channel.SubtractAsync(n1, n2);
        }
        
        public double Multiply(double n1, double n2)
        {
            return base.Channel.Multiply(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double n1, double n2)
        {
            return base.Channel.MultiplyAsync(n1, n2);
        }
        
        public double Divide(double n1, double n2)
        {
            return base.Channel.Divide(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double n1, double n2)
        {
            return base.Channel.DivideAsync(n1, n2);
        }
        
        public double Power(double baseValue, double exponent)
        {
            return base.Channel.Power(baseValue, exponent);
        }
        
        public System.Threading.Tasks.Task<double> PowerAsync(double baseValue, double exponent)
        {
            return base.Channel.PowerAsync(baseValue, exponent);
        }
        
        public double SquareRoot(double value)
        {
            return base.Channel.SquareRoot(value);
        }
        
        public System.Threading.Tasks.Task<double> SquareRootAsync(double value)
        {
            return base.Channel.SquareRootAsync(value);
        }
        
        public double Sine(double angleInDegrees)
        {
            return base.Channel.Sine(angleInDegrees);
        }
        
        public System.Threading.Tasks.Task<double> SineAsync(double angleInDegrees)
        {
            return base.Channel.SineAsync(angleInDegrees);
        }
        
        public double Cosine(double angleInDegrees)
        {
            return base.Channel.Cosine(angleInDegrees);
        }
        
        public System.Threading.Tasks.Task<double> CosineAsync(double angleInDegrees)
        {
            return base.Channel.CosineAsync(angleInDegrees);
        }
        
        public double Tangent(double angleInDegrees)
        {
            return base.Channel.Tangent(angleInDegrees);
        }
        
        public System.Threading.Tasks.Task<double> TangentAsync(double angleInDegrees)
        {
            return base.Channel.TangentAsync(angleInDegrees);
        }
        
        public double Logarithm(double value)
        {
            return base.Channel.Logarithm(value);
        }
        
        public System.Threading.Tasks.Task<double> LogarithmAsync(double value)
        {
            return base.Channel.LogarithmAsync(value);
        }
        
        public double Exponential(double value)
        {
            return base.Channel.Exponential(value);
        }
        
        public System.Threading.Tasks.Task<double> ExponentialAsync(double value)
        {
            return base.Channel.ExponentialAsync(value);
        }
        
        public double AbsoluteValue(double value)
        {
            return base.Channel.AbsoluteValue(value);
        }
        
        public System.Threading.Tasks.Task<double> AbsoluteValueAsync(double value)
        {
            return base.Channel.AbsoluteValueAsync(value);
        }
        
        public System.Collections.Generic.Dictionary<string, double> PerformMultipleOperations(double value1, double value2)
        {
            return base.Channel.PerformMultipleOperations(value1, value2);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> PerformMultipleOperationsAsync(double value1, double value2)
        {
            return base.Channel.PerformMultipleOperationsAsync(value1, value2);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IScientificCalculatorService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IScientificCalculatorService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:59122/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ScientificCalculatorServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IScientificCalculatorService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ScientificCalculatorServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IScientificCalculatorService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IScientificCalculatorService,
        }
    }
}
